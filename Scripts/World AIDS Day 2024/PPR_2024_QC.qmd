---
title: "PPR 2024 - QC"
author: "Karishma Srikanth"
format: docx
editor: visual
---

# PPR 2024

```{r libraries}
#| echo: false
#| include: true
#| warning: false
#| message: false

  library(tidyverse)
  library(glitr)
  library(glamr)
  library(gophr)
  library(extrafont)
  library(scales)
  library(tidytext)
  library(patchwork)
  library(ggtext)
  library(glue)
  library(janitor)
  library(lubridate)
  library(googlesheets4)
  library(gt)
  library(gtExtras)
```

```{r load}
#| echo: false
#| include: true
#| warning: false
#| message: false
#| 
# SI specific paths/functions  
load_secrets()

# MSD
filepath <- si_path() %>% 
  return_latest("MER_Structured_Datasets_OU_IM_FY22")

# Grab metadata
metadata <- get_metadata(filepath) 

# MSD PREP --------------------------------------

#read MSD
df_msd <- read_psd(filepath)


#LOCAL PARTNER DATA PREP --------------------------------------------------------

#Read in the google sheet hyperfile with local partner
sheet_id <- "1tGk1TR8l3WacR8qMIK0AQvFynABijAaLHeIctE1nUoM"

df_partner <- read_sheet(sheet_id, sheet = "MechID-PartnerType") %>% 
  janitor::clean_names() %>% 
  select(mechanism_id, pepfar_local_partner_status) %>% 
  rename(mech_code = mechanism_id,
         partner_type = pepfar_local_partner_status) %>% 
  mutate(mech_code = as.character(mech_code))
         # ,
         # partner_type = case_when(partner_type == "Regional" ~ "Local",
         #                          partner_type == "TBD Local" ~ "Local", TRUE ~ partner_type))


# DREAMS DATA PREP --------------------------------------------------------------

# Google sheet ID for DREAMS DSNU list
dsnu_g_id <- "1oJZyXtvExN9UoQ6krFHERMoXEgCQgsHLf0tVIbmsi_o"

#MSD path
dsnu_msd_path <- si_path() %>% 
  return_latest("PSNU_IM_DREAMS_FY22")

#import DREAMS DSNU crosswalk
#recommend adding psnu_uids to this sheet
dsnu_list <- read_sheet(dsnu_g_id, sheet = "DSNU-Agency-All-FY") %>% 
  janitor::clean_names() %>% 
  select(ou, cop22_psnu, dreams_dsnu, cop_23_fy24_implementing_agency)

#rename names
names(dsnu_list)<-c("operatingunit", "psnu", "dsnu", "agencies_FY24")

#import msd and filter to current year
df_msd_dreams <- read_psd(dsnu_msd_path) %>% 
  filter(fiscal_year == metadata$curr_fy)

msd_dsnu_xwalk <- df_msd_dreams %>% 
  count(operatingunit, operatingunituid, psnu, psnuuid, cop22_psnu, cop22_psnuuid, dsnu, dsnuuid) %>% 
  mutate(raised_lvl = ifelse(psnuuid != cop22_psnuuid, TRUE, FALSE)) %>% 
  mutate(dsnu_new = case_when(operatingunit != "Uganda" & raised_lvl == TRUE ~ cop22_psnu,
                              TRUE ~ dsnu),
         dsnuuid_new = case_when(operatingunit != "Uganda" & raised_lvl == TRUE ~ cop22_psnuuid,
                                 TRUE ~ dsnuuid))

#join the new xwalk back to msd and then join the internal dsnu list to the msd
df_dreams_all <- df_msd_dreams %>% 
  left_join(msd_dsnu_xwalk) %>% 
  left_join(dsnu_list, by=c("operatingunit", "cop22_psnu" = "psnu", "dsnu_new"= "dsnu"))

# HRH -----------------------------------------------------------------------

df_hrh <- si_path() %>% 
  return_latest("HRH") %>% 
  read_psd()

# UNAIDS --------------------------------------------------------------------

Sys.unsetenv("GITHUB_PAT")
df_tt <- mindthegap::pull_testtreat(TRUE)

```

```{r functions}
#| echo: false
#| include: true
#| warning: false
#| message: false

# FUNCTIONS --------------------------------------------------------------------

#clean number function
clean_number <- function(x, digits = 0){
  dplyr::case_when(x >= 1e9 ~ glue("{round(x/1e9, digits)} billion"),
                   x >= 1e6 ~ glue("{round(x/1e6, digits)} million"),
                   x >= 1e3 ~ glue("{round(x/1e3, digits)} thousand"),
                   TRUE ~ glue("{x}"))
}


#LP Function
#result_type = value or share
grab_lp_results_clean <- function(df, indic, result_type) {
  
  df_munge <- suppressMessages(df %>% 
                                 # bind_rows(df_arch) %>%
                                 left_join(df_partner, by = c("mech_code")) %>%
                                 filter(funding_agency == "USAID",
                                        indicator == indic,
                                        standardizeddisaggregate == "Total Numerator") %>% 
                                 group_by(funding_agency, fiscal_year, indicator, partner_type) %>% 
                                 summarise(across(cumulative, sum, na.rm = TRUE)) %>%
                                 ungroup() %>% 
                                 filter(partner_type != "TBD") %>%
                                 #filter(fiscal_year != 2022) %>%
                                 pivot_wider(names_from = partner_type, values_from = cumulative) %>%
                                 group_by(fiscal_year) %>%
                                 mutate(Total = International + Local,
                                        share = Local / Total)  %>%
                                 pivot_longer(cols = International:Total, names_to = "partner_type"))
  
  title_info_lp <- df_munge %>% 
    filter(partner_type == "Local", fiscal_year == metadata$curr_fy) %>% 
    select(fiscal_year, indicator, value, share) %>% 
    mutate(
      value = value %>% clean_number(1),#change to 1 if you want 1 decimal accuracy
      share = percent(round(share, 2))) %>% 
    pull(result_type)
  
  return(title_info_lp)
}

grab_lp_results <- function(df, indic, result_type) {
  
  df_munge <- suppressMessages(df %>% 
                                 # bind_rows(df_arch) %>%
                                 left_join(df_partner, by = c("mech_code")) %>%
                                 filter(funding_agency == "USAID",
                                        indicator == indic,
                                        standardizeddisaggregate == "Total Numerator") %>% 
                                 group_by(funding_agency, fiscal_year, indicator, partner_type) %>% 
                                 summarise(across(cumulative, sum, na.rm = TRUE)) %>%
                                 ungroup() %>% 
                                 filter(partner_type != "TBD") %>%
                                 #filter(fiscal_year != 2022) %>%
                                 pivot_wider(names_from = partner_type, values_from = cumulative) %>%
                                 group_by(fiscal_year) %>%
                                 mutate(Total = International + Local,
                                        share = Local / Total)  %>%
                                 pivot_longer(cols = International:Total, names_to = "partner_type"))
  
  title_info_lp <- df_munge %>% 
    filter(partner_type == "Local", fiscal_year == metadata$curr_fy) %>% 
    select(fiscal_year, indicator, value, share) %>% 
    mutate(
      value = value,#change to 1 if you want 1 decimal accuracy
      share = percent(round(share, 2))) %>% 
    pull(result_type) 
  
  return(title_info_lp)
}

#key pops function clean
pull_kp_clean <- function(df, indic) {
  kp_val <- df %>%
    filter(funding_agency == "USAID",
           str_detect(standardizeddisaggregate, "KeyPop(?!\\/Status)"),
           indicator %in% c("PrEP_NEW", "TX_CURR", "KP_PREV"),
           fiscal_year == metadata$curr_fy) %>%
    count(indicator, wt = cumulative) %>%
    mutate(n = clean_number(n)) %>% 
    pivot_wider(names_from = indicator, values_from = "n") %>% 
    pull(indic)
  
  return(kp_val)
}

#key pops function complete
pull_kp <- function(df, indic) {
  kp_val <- df %>%
    filter(funding_agency == "USAID",
           str_detect(standardizeddisaggregate, "KeyPop(?!\\/Status)"),
           indicator %in% c("PrEP_NEW", "TX_CURR", "KP_PREV"),
           fiscal_year == metadata$curr_fy) %>%
    count(indicator, wt = cumulative) %>%
    pivot_wider(names_from = indicator, values_from = "n") %>% 
    pull(indic) 
  
  return(kp_val)
}

```

# **1. Analysis of Mission Objective Performance:Â  (3,491/3,500)**

## Epi Updates (Gina)

### TP #1: Number of Countries USAID Supports, FY24

```{r usaid_cntry_count}
#| warning: false
#| message: false

df_msd %>% 
  filter(fiscal_year == metadata$curr_fy,
         funding_agency == "USAID") %>% 
  count(country) %>% 
  nrow()
```
### TP #2: Countries approachings 95s - UNAIDS

```{r unaids_95_tp}
#| warning: false
#| message: false

unaids_yr <- df_tt %>% 
  filter(year == max(year)) %>% 
  pull(year) %>% unique()

##Progress toward 90-90-90 - how many countries have achieved the 90s as a proxy for close to 95s?
  df_rel_lim <- df_tt %>% 
      filter(year == max(year),
             indicator %in% c("Percent Known Status of PLHIV",
                              "Percent on ART with Known Status",
                              "Percent VLS on ART"), #using rel base indicators
             age == "All",
             sex == "All") %>% 
      select(year, country, indicator, estimate, lower_bound, upper_bound, achv_95_relative, pepfar)
    
  num_achv_90s <- df_rel_lim %>% 
      filter(pepfar == TRUE) %>% 
      mutate(
        goal_rate = 90, #use 90 as the goal metric for each indicator
        achieved = estimate >= goal_rate) %>% 
       group_by(country) %>% 
        summarise(all_achieved = all(achieved), .groups = 'drop') %>% 
        filter(all_achieved) 

```

```{r unaids_95_qc}
#| echo: false
#| include: true
#| warning: false
#| message: false

num_achv_90s %>% 
  gt() %>% 
   # fmt_number(columns = c(4), 
   #           decimals = 0) %>% 
  tab_header(
    title = glue("TP #1: Countries close to achieving 95s in 2023" %>% toupper()),
    subtitle = "UNAIDS 2024 Estimates") %>% 
  gt_theme_nytimes() 

```

### Program highlights along the clinical cascade and Primary Prevention (Gina)

### TP #3: FY24 HTS_TST_POS and TX_CURR for USAID

```{r hts_txcurr_tp}
#| warning: false
#| message: false

fy24_txcurr_htspos <- df_msd %>% 
  filter(funding_agency == "USAID",
         fiscal_year == metadata$curr_fy,
         indicator %in% c("HTS_TST_POS", "TX_CURR"),
         standardizeddisaggregate == "Total Numerator") %>% 
  group_by(fiscal_year, funding_agency, indicator) %>% 
  summarize(across(cumulative, \(x) sum(x, na.rm = TRUE)),.groups="drop")

```

```{r hts_txcurr_qc}
#| echo: false
#| include: true
#| warning: false
#| message: false

fy24_txcurr_htspos %>% 
  gt() %>% 
   fmt_number(columns = c(4),
             decimals = 0) %>% 
  tab_header(
    title = glue("TP #3: USAID FY24 HTS_TST_POS and TX_CURR" %>% toupper()),
    subtitle = glue("{metadata$caption}")) %>% 
  gt_theme_nytimes() 

```

### TP #5: OVC_SERV

```{r ovc_tp}
#| warning: false
#| message: false

ovc_serv_qc <- df_msd %>% 
  filter(indicator %in% c("OVC_SERV"),
         standardizeddisaggregate %in% c("Total Numerator"),
         #  trendscoarse == "<18",
         fiscal_year == metadata$curr_fy,
         funding_agency == "USAID") %>%
    group_by(fiscal_year, funding_agency, indicator) %>%
  summarise(across(starts_with("cumulative"), sum, na.rm = T)) %>% 
  ungroup()
```

```{r ovc_qc}
#| echo: false
#| include: true
#| warning: false
#| message: false

ovc_serv_qc %>% 
  gt() %>% 
   fmt_number(columns = c(4),
             decimals = 0) %>% 
  tab_header(
    title = glue("TP #5: USAID FY24 OVC_SERV" %>% toupper()),
    subtitle = glue("{metadata$caption}")) %>% 
  gt_theme_nytimes() 

```

### TP #6: AGYW_PREV for AGYW 10-29

```{r dreams_tp}
#| message: false
#| warning: false
#| 
# DREAMS ----------------------------------------------------------

#For total DREAMS programming, use all 4 disaggs + ages 10-29
viz_package <- df_dreams_all %>%
  filter(indicator=="AGYW_PREV",
         standardizeddisaggregate %in% c("Age/Sex/Time/Complete+",
                                         "Age/Sex/Time/Complete",
                                         "Age/Sex/Time/Started",
                                         "Age/Sex/Time/Incomplete"),
         numeratordenom=="D",
         age_2019 %in% c("10-14","15-19","20-24","25-29"),
         sex=="Female")

#create shares by USAID and non-USAID contributing DSNUs
dreams_overall_val_qc <- viz_package %>% 
  mutate(usaid_dsnu = ifelse(str_detect(agencies_FY24, "USAID"), "USAID", "non-USAID")) %>% 
  group_by(indicator, fiscal_year, usaid_dsnu) %>% 
  summarize(across(cumulative, \(x) sum(x, na.rm = TRUE)),.groups="drop") %>% 
  pivot_wider(names_from = "usaid_dsnu", values_from = 'cumulative') %>% 
  mutate(total = USAID + `non-USAID`) %>% 
  pivot_longer(cols = c(3:4), names_to = "funding_agency") %>% 
  mutate(share = value / total) %>% 
  select(-c(total))

```

```{r dreams_qc}
#| echo: false
#| include: true
#| warning: false
#| message: false

dreams_overall_val_qc %>% 
  gt() %>% 
  fmt_number(columns = c(4), 
             decimals = 0) %>% 
  fmt_percent(columns = c(5),
              decimals = 0) %>% 
  grand_summary_rows(
    columns = where(is.numeric),
    fns = list(
      Overall = ~ sum(., na.rm = T)
    ),
    formatter = fmt_number,
    decimals = 0
  ) %>% 
  tab_header(
    title = glue("TP #6: USAID AGYW_PREV for Women 10-29" %>% toupper())) %>% 
  gt_theme_nytimes() 

```

### TP #7: USAID KP_PREV and TX_CURR for KP

```{r kp_tp}
#| message: false
#| warning: false

fy24_kp_prev <- df_msd %>% 
  filter(indicator == "KP_PREV",
         standardizeddisaggregate == "Total Numerator",
         fiscal_year == metadata$curr_fy,
         funding_agency == "USAID") %>% 
  group_by(fiscal_year, funding_agency, indicator) %>% 
    summarize(across(cumulative, \(x) sum(x, na.rm = TRUE)),.groups="drop") 

#kp_txcurr <- pull_kp(df_msd, "TX_CURR")

kp_txcurr <- df_msd %>% 
  filter(indicator == "TX_CURR",
         str_detect(standardizeddisaggregate, "KeyPop"),
         fiscal_year == metadata$curr_fy,
         funding_agency == "USAID") %>% 
  group_by(fiscal_year, funding_agency, indicator) %>% 
    summarize(across(cumulative, \(x) sum(x, na.rm = TRUE)),.groups="drop") 

df_kp_qc <- bind_rows(fy24_kp_prev, kp_txcurr)
```

```{r kp_qc}
#| echo: false
#| include: true
#| warning: false
#| message: false

df_kp_qc %>% 
  gt() %>% 
  fmt_number(columns = c(4), 
             decimals = 0) %>% 
  # fmt_percent(columns = c(5),
  #             decimals = 0) %>% 
  # grand_summary_rows(
  #   columns = where(is.numeric),
  #   fns = list(
  #     Overall = ~ sum(., na.rm = T)
  #   ),
  #   formatter = fmt_number,
  #   decimals = 0
  # ) %>% 
  tab_header(
    title = glue("TP #7: USAID KP_PREV and KP TX_CURR" %>% toupper())) %>% 
  gt_theme_nytimes() 

```

## Collaboration with UNAIDS, Global Fund, GHSD, WHO, and other multilateral and regional organizations, and PPPs to sustain the global HIV response., sustainable financing (Lisa, Bernadette, etc)

### TP #8: USAID Local Partner Share of HTS_TST and TX_CURR

```{r local_partner_tp}
#| message: false
#| warning: false

hts_tx_lp_qc <- df_msd %>% 
  left_join(df_partner, by = c("mech_code")) %>%
  filter(funding_agency == "USAID",
         indicator %in% c("HTS_TST", "TX_CURR"),
         standardizeddisaggregate == "Total Numerator") %>%
  group_by(funding_agency, fiscal_year, indicator, partner_type) %>% 
  summarise(across(cumulative, sum, na.rm = TRUE)) %>%
  ungroup() %>% 
  filter(!str_detect(partner_type, "TBD")) %>%
  pivot_wider(names_from = partner_type, values_from = cumulative) %>%
  group_by(fiscal_year) %>%
  mutate(Total = International + Local)  %>%
  ungroup() %>% 
  pivot_longer(cols = International:Local, names_to = "partner_type") %>% 
  mutate(share = value / Total) %>% 
  filter(fiscal_year == metadata$curr_fy) %>% 
  select(fiscal_year, funding_agency, indicator, partner_type, value, share)
```

```{r local_partner_qc}
#| echo: false
#| include: true
#| warning: false
#| message: false

hts_tx_lp_qc %>% 
  #filter(`OU category` != "Total") %>% 
  gt::gt() %>% 
  fmt_number(columns = c(5), 
             decimals = 0) %>% 
  fmt_percent(columns = c(6),
              decimals = 0) %>% 
  tab_header(
    title = glue("TP #6: FY24 USAID Local Partner Share for HTS and TX_CURR" %>% toupper())) %>% 
  gt_theme_nytimes() 
```


## Innovation and prevention choice (Emily D & Vincent)

### TP #9: USAID PrEP_NEW and VMMC_CIRC

```{r prevention_tp}
#| message: false
#| warning: false

prep_vmmc_val <- df_msd %>%
  filter(funding_agency == "USAID",
         standardizeddisaggregate %in% c("Total Numerator"),
         indicator %in% c("PrEP_NEW", "VMMC_CIRC"),
         fiscal_year == metadata$curr_fy) %>%
  group_by(fiscal_year, funding_agency, indicator) %>% 
  summarise(across(starts_with("cumulative"), sum, na.rm = T)) %>% ungroup()

```
```{r prevention_qc}
#| echo: false
#| include: true
#| warning: false
#| message: false

prep_vmmc_val %>% 
  #filter(`OU category` != "Total") %>% 
  gt::gt() %>% 
  fmt_number(columns = c(4), 
             decimals = 0) %>% 
  # fmt_percent(columns = c(6),
  #             decimals = 0) %>% 
  tab_header(
    title = glue("TP #9: FY24 USAID PrEP_NEW and VMMC_CIRC" %>% toupper())) %>% 
  gt_theme_nytimes() 
```

### TP #10: USAID Rollout of Injectable PrEP

```{r prep_cab_la_tp}
#| warning: false
#| message: false

prep_cab_la_tp <- df_msd %>%
  filter(funding_agency == "USAID",
         standardizeddisaggregate %in% c("Type"),
         str_detect(otherdisaggregate, "Injectable"),
        # otherdisaggregate == "PrEP Type - Injectable",
         indicator %in% c("PrEP_NEW", "PrEP_CT"),
         fiscal_year == metadata$curr_fy) %>% 
group_by(fiscal_year, funding_agency, indicator, otherdisaggregate) %>% 
summarise(across(starts_with("cumulative"), sum, na.rm = T)) %>% ungroup()
```

```{r prep_cab_la_qc}
#| echo: false
#| include: true
#| warning: false
#| message: false

prep_cab_la_tp %>% 
  #filter(`OU category` != "Total") %>% 
  gt::gt() %>% 
  fmt_number(columns = c(5), 
             decimals = 0) %>% 
  # fmt_percent(columns = c(6),
  #             decimals = 0) %>% 
  tab_header(
    title = glue("TP #10: FY24 USAID PrEP_NEW/CT Injectable" %>% toupper())) %>% 
  gt_theme_nytimes() 

```

